import org.springframework.security.crypto.bcrypt.BCrypt;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

@WebFilter("/votre-endpoint-d-authentification")
public class CustomAuthenticationFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Initialisation du filtre
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        
        if (httpRequest.getMethod().equals("POST")) {
            String username = httpRequest.getParameter("username");
            String password = httpRequest.getParameter("password");

            // Chiffrez le mot de passe, par exemple avec BCrypt
            String encryptedPassword = BCrypt.hashpw(password, BCrypt.gensalt());

            // Créez une nouvelle requête avec le mot de passe chiffré
            HttpServletRequestWrapper wrappedRequest = new HttpServletRequestWrapper(httpRequest) {
                @Override
                public String getParameter(String name) {
                    if ("password".equals(name)) {
                        return encryptedPassword;
                    }
                    return super.getParameter(name);
                }
            };

            // Poursuivez le traitement avec la nouvelle requête
            chain.doFilter(wrappedRequest, response);
        } else {
            // Pour les autres méthodes HTTP, poursuivre sans modification
            chain.doFilter(request, response);
        }
    }

    @Override
    public void destroy() {
        // Nettoyage du filtre
    }
}
