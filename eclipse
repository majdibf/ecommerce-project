**Document Technique**

**Projet : Développement d'une Bibliothèque de Chiffrement avec Bcrypt**

**Contexte du Projet :**

L'objectif de ce projet est de développer une bibliothèque de chiffrement de mots de passe en utilisant l'algorithme bcrypt. Cette bibliothèque sera intégrée dans plusieurs projets, notamment dans le système OPRA et OAE, pour améliorer la sécurité des mots de passe stockés. L'intégration de cette bibliothèque permettra de générer des mots de passe complexes, de les saler, de les hacher, et de stocker ces données de manière sécurisée dans la base de données.

**Choix Technique :**

***Bcrypt - Principe de Fonctionnement :***

Bcrypt est un algorithme de hachage de mots de passe conçu pour être résistant aux attaques par force brute. Il est basé sur le chiffrement Blowfish et inclut un mécanisme de salage pour renforcer la sécurité des mots de passe stockés. Voici comment fonctionne bcrypt :

1. **Génération d'un Sel (Salt)** : Avant de hacher le mot de passe, un sel aléatoire est généré. Ce sel est une chaîne de caractères aléatoire et unique qui est concaténée au mot de passe avant le hachage. Le sel est stocké en clair avec le mot de passe haché dans la base de données.
2. **Hachage du Mot de Passe** : Le mot de passe combiné avec le sel est haché à l'aide de l'algorithme Blowfish. Le résultat est une chaîne de caractères hachée qui est stockée dans la base de données. L'algorithme bcrypt génère automatiquement un coût de hachage (work factor) qui définit le nombre de tours du chiffrement.
3. **Stockage du Mot de Passe Haché** : Le mot de passe haché, le sel et d'autres métadonnées (comme le coût) sont stockés dans la base de données. Lorsqu'un utilisateur tente de se connecter, le même sel est utilisé pour hacher le mot de passe entré, et la comparaison avec la valeur stockée permet de vérifier l'authenticité.

***Implémentations Possibles :***

Nous pouvons opter pour deux options utilisées : JBCrypt et Spring Security.

1. **JBCrypt :** Bibliothèque open source sous licence Apache License 2.0

**Exemple d'Implémentation avec JBCrypt :**

Voici un exemple simple d'utilisation de JBCrypt pour hacher un mot de passe en Java :

```java
import org.mindrot.jbcrypt.BCrypt;

public class PasswordHashingExample {
    public static void main(String[] args) {
        String password = "motdepasse123";
        String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt(128));

        System.out.println("Mot de passe brut : " + password);
        System.out.println("Mot de passe haché : " + hashedPassword);
    }
}

```

1. **Spring Security avec BCryptPasswordEncoder :**
    
    **Exemple d'Implémentation avec Spring Security :** 
    
    Voici un exemple simple d'utilisation de Spring Security avec `BCryptPasswordEncoder` pour hacher un mot de passe en Java :
    
    ```java
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    
    public class PasswordHashingExample {
        public static void main(String[] args) {
            String password = "motdepasse123";
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            String hashedPassword = encoder.encode(password);
    
            System.out.println("Mot de passe brut : " + password);
            System.out.println("Mot de passe haché : " + hashedPassword);
        }
    }
    
    ```
    
    Risque d’entraîner des conflits de dépendances lors de l’integration de la lib dans les projets flashlease LBP OPRA OAE.
    

Generation d’un sel de 128 bits

```docker
import org.mindrot.jbcrypt.BCrypt;
import java.security.SecureRandom;
import java.util.Base64;

public class SaltGenerationExample {
    public static void main(String[] args) {
        // Générer un sel aléatoire de 128 bits
        byte[] saltBytes = generateSalt(16); // 16 octets = 128 bits

        // Convertir le sel en une chaîne Base64 pour le stockage
        String salt = Base64.getEncoder().encodeToString(saltBytes);

        System.out.println("Sel (Base64) : " + salt);
    }

    public static byte[] generateSalt(int length) {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[length];
        random.nextBytes(salt);
        return salt;
    }
}

```

https://bcrypt-generator.com/

$2a$10$7rf5szmzV0Rqt68ee6ZJa.Pgfi64hv1mpwptQ34PFUwaI.lJsO4c2

1. **"$2a$"** : C'est l'identifiant de la version de l'algorithme bcrypt qui a été utilisée. Dans ce cas, "2a" indique l'utilisation de l'algorithme bcrypt.
2. **"$10$"** : C'est le facteur coût utilisé pour déterminer la complexité du hachage. Le "10" signifie que l'algorithme a été exécuté 2^10 fois, ce qui détermine la résistance aux attaques par force brute. Plus le coût est élevé, plus le hachage est sécurisé mais aussi plus lent à calculer.
3. **"7rf5szmzV0Rqt68ee6ZJa"** : C'est le sel (salt) utilisé pour renforcer la sécurité du hachage. Le sel est une chaîne aléatoire unique générée pour chaque mot de passe. Il est concaténé au mot de passe avant le hachage. Cela signifie que même si deux utilisateurs ont le même mot de passe, leurs hachages seront différents en raison de l'utilisation de sels différents.
4. **".Pgfi64hv1mpwptQ34PFUwaI.lJsO4c2"** : C'est la partie hachée du mot de passe. Cette section contient le résultat du hachage proprement dit, basé sur la combinaison du mot de passe de l'utilisateur et du sel. C'est cette partie qui est stockée dans la base de données pour vérifier les mots de passe lors de l'authentification.

Lorsque je dis que l'algorithme bcrypt est exécuté "2^10 fois" avec un facteur coût de 10, cela signifie que l'algorithme de hachage est itéré 1 024 fois (2 élevé à la puissance 10). Plus le facteur coût est élevé, plus le nombre d'itérations augmente, ce qui rend le calcul du hachage plus lent et donc plus sécurisé.

Pour illustrer cela avec un exemple bidon, imaginons que nous ayons un facteur coût de 2 (ce qui signifie 2^2 itérations, soit 4 itérations). Voici comment cela pourrait se dérouler :

Supposons que notre mot de passe soit "motdepasse" et que notre sel soit "selsupersecret".

1. Lors de la première itération, l'algorithme bcrypt combine le mot de passe et le sel, puis effectue une opération de hachage.
2. Lors de la deuxième itération, il prend le résultat de la première itération et le hache à nouveau.
3. Il répète ce processus pour un total de 4 itérations (dans cet exemple).

En fin de compte, le hachage final résulte de ces itérations successives. Plus le facteur coût est élevé, plus le nombre d'itérations est grand, ce qui rend le hachage plus sécurisé car il devient plus difficile et plus lent pour un attaquant de tester de nombreuses combinaisons de mots de passe.

Cependant, en pratique, le facteur coût est généralement réglé à une valeur plus élevée que 2 (par exemple, 10 ou 12), ce qui signifie que des milliers d'itérations sont effectuées pour générer le hachage, ce qui rend pratiquement impossible pour un attaquant de casser le hachage par force brute en un temps raisonnable.

**Estimation des Tâches à Réaliser :**

1. **Implémentation de la Bibliothèque de Chiffrement** (CSEDEM-10325) :
    - Initialisation du projet et ajout des dépendances nécessaires.
    - Implémentation d'une méthode pour générer un mot de passe aléatoire complexe.
    - Implémentation d'une méthode pour crypter un mot de passe.
    - Implémentation d'une méthode pour vérifier la correspondance entre un mot de passe brut et un mot de passe haché.
    - Estimation : 1 jour.
2. **Mise à Jour de la Structure de la Base de Données** (CSEDEM-10326) :
    - Choix technique pour la nouvelle structure de la base de données.
    - Mise à jour de la table OAE.VEN_VENDEUR pour ajouter une adresse mail supplémentaire.
    - Garantie de l'unicité du sel par utilisateur.
    - Estimation : À déterminer.
3. **Amélioration de la Librairie de Hachage** (CSEDEM-10327) :
    - Enrichissement du traitement existant pour récupérer le sel et le mot de passe salé d'un utilisateur.
    - Estimation : 0.5 jour.
4. **Initialisation des Données des Utilisateurs Existant** (CSEDEM-10328) :
    - Développement d'un traitement d'initialisation pour les utilisateurs actifs, incluant la génération d'un sel et l'alimentation du mot de passe haché.
    - Implémentation sous forme d'un batch ou d'une super fonctionnalité dans OPRA.
    - Estimation : 2-3 jours.
5. **Impacts sur OPRA - Création de Compte** (CSEDEM-10330) :
    - Intégration de la génération d'un sel, la création d'un mot de passe complexe et le hachage dans le processus de création de compte dans le projet OPRA.
    - Intégration de la bibliothèque de cryptage dans le projet OPRA.
    - Appel de la méthode de chiffrement.
    - Stockage du sel et du mot de passe chiffré dans la base de données.
    - Estimation : 2 jours.
6. **Impacts sur OPRA - Envoyer un Code d'Accès** (CSEDEM-10331) :
    - Ajout de la fonctionnalité "Envoyer code d'accès" avec la génération, le hachage et l'envoi sécurisé du mot de passe par mail.
    - Modification du modèle de mail pour retirer l'identifiant du compte.
    - Estimation : 2 jours.
7. **Impacts sur OPRA - Envoyer l'Identifiant du Compte** (CSEDEM-10332) :
    - Ajout d'un bouton "Envoyer Identifiant du compte" avec l'envoi sécurisé de l'identifiant par mail.
    - Estimation : 2 jours.
8. **Impacts sur OPRA - Suppression de l'Affichage du Mot de Passe** (CSEDEM-10333) :
    - Suppression de l'affichage du mot de passe dans l'onglet vendeur.
    - Estimation : 0.25 jour.
9. **Impacts sur OPRA - Affichage du 2nd Champ Email** (CSEDEM-10334) :
    - Ajout de l'affichage du second champ email.
    - Estimation : 0.5 jour.
10. **Impacts sur OAE - Création de Compte** (CSEDEM-10335) :
    - Intégration de la génération d'un sel, la création d'un mot de passe complexe et le hachage dans le processus de création de compte dans le projet OAE.
    - Intégration de la bibliothèque de cryptage dans le projet OAE.
    - Appel de la méthode de chiffrement.
    - Stockage du sel et du mot de passe chiffré dans la base de données.
    - Estimation : 2 jours.

Ces tâches reflètent les étapes nécessaires pour mener à bien le projet de développement de la bibliothèque de chiffrement avec bcrypt, ainsi que son intégration dans les projets OPRA et OAE. Les estimations fournies servent de base pour la planification et la gestion du projet.

**Choix Technique - Implémentations Java avec JBCrypt et Spring Security :**

Lorsqu'il s'agit de choisir une implémentation Java pour notre bibliothèque de chiffrement avec bcrypt, nous pouvons opter pour deux options couramment utilisées : JBCrypt et Spring Security.

1. **JBCrypt :**
    
    **Exemple d'Implémentation avec JBCrypt :**
    
    Voici un exemple simple d'utilisation de JBCrypt pour hacher un mot de passe en Java :
    
    ```java
    import org.mindrot.jbcrypt.BCrypt;
    
    public class PasswordHashingExample {
        public static void main(String[] args) {
            String password = "motdepasse123";
            String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
    
            System.out.println("Mot de passe brut : " + password);
            System.out.println("Mot de passe haché : " + hashedPassword);
        }
    }
    
    ```
    
    Ce code illustre comment utiliser JBCrypt pour hacher un mot de passe de manière sécurisée.
    
2. **Spring Security avec BCryptPasswordEncoder :**
    
    **Exemple d'Implémentation avec Spring Security :**
    
    Voici un exemple simple d'utilisation de Spring Security avec `BCryptPasswordEncoder` pour hacher un mot de passe en Java :
    
    ```java
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    
    public class PasswordHashingExample {
        public static void main(String[] args) {
            String password = "motdepasse123";
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            String hashedPassword = encoder.encode(password);
    
            System.out.println("Mot de passe brut : " + password);
            System.out.println("Mot de passe haché : " + hashedPassword);
        }
    }
    
    ```
    
    Ce code illustre comment utiliser `BCryptPasswordEncoder` de Spring Security pour hacher un mot de passe de manière sécurisée.
    

Le choix entre JBCrypt et Spring Security dépendra des besoins spécifiques de notre projet, de la compatibilité avec notre stack technologique, de la familiarité de l'équipe de développement avec chaque solution, et de la tolérance aux dépendances externes. Chacune de ces options offre une sécurité adéquate pour le hachage de mots de passe. Dans notre contexte Java, ces exemples montrent comment utiliser ces bibliothèques pour sécuriser les mots de passe.
